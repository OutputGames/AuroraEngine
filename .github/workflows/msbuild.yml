# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  workflow_dispatch:
    inputs:
      cfg:
        description: "Build Configuration"
        default: "Release"
      platform:
        description: "Build Platform"
        default: "x64"
      addrel:
        description: "Push to release?"
        default: false
      relname:
        description: "Release Name"
        default: "new release"

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: ${{github.event.inputs.cfg}}
  BUILD_PLATFORM: ${{github.event.inputs.platform}}
  ADDREL: ${{github.event.inputs.addrel}}
  RELNAME: ${{github.event.inputs.relname}}

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Run Premake
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: ./build.bat

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:platform=${{env.BUILD_PLATFORM}}  ${{env.SOLUTION_FILE_PATH}}
    - name: ECHO inputs
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: echo ${{github.event.inputs.addrel}}
      
    - name: Set up Resources/DLLs
      working-directory: ${{env.GITHUB_WORKSPACE}}

      run: ./setupfiles.bat ${{env.BUILD_CONFIGURATION}}

    - name: Make bzip
      uses: vimtor/action-zip@v1
      with:
          files:  bin\${{env.BUILD_CONFIGURATION}}\
          dest:  bin\${{env.BUILD_CONFIGURATION}}\build.zip

    - name: Upload a Build Artifact
      if: ${{env.ADDREL == 'false'}}
      uses: actions/upload-artifact@v3.1.2
      with:
        # Artifact name
        name: AuroraEngine  # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: ./bin/${{env.BUILD_CONFIGURATION}}/build.zip

    - name: Release
      if: ${{env.ADDREL == 'true'}}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.run_number }}
        release_name: ${{env.RELNAME}}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      if: ${{env.ADDREL == 'true'}}
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: bin\${{env.BUILD_CONFIGURATION}}\build.zip
        asset_name: windows-${{ github.run_id }}.zip
        asset_content_type: application/zip
      
        
